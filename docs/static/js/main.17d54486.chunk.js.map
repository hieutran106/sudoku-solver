{"version":3,"sources":["Line.tsx","sudokus.ts","App.tsx","index.tsx"],"names":["Line","cells","lineNum","className","map","cell","index","isOriginal","includes","value","quiz1","quiz2","quiz3","quiz4","quiz5","quiz6","quiz7","quiz8","quiz9","quiz10","quiz11","App","props","initState","randomNewBoard","state","solveSudokuHandler","bind","nextState","randomHandle","this","setState","pos","board","newPos","Math","floor","timeoutId","clearTimeout","all","random","length","randomSudoku","line","ele","boardPos","stack","selections","selectionList","status","currPos","row","col","existed","Array","fill","i","c","parseInt","j","lowerX","upperX","lowerY","upperY","k","push","top","newBoard","setBoardValue","newBoardPos","nextEmptyCell","newSelection","window","setTimeout","console","log","indexes","filledPosition","emptyBoardAtPosition","newStack","filter","rows","positions","curr","msg","onClick","style","marginBottom","padding","title","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uPAqBeA,G,MAZmB,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,QACxC,OACI,oBAAIC,UAAU,OAAd,SACKF,EAAMG,KAAI,SAACC,EAAMC,GAAP,OACP,oBAAgBH,UAAS,eAAUE,EAAKE,YAAc,WAA7B,YAA2C,CAAC,EAAG,GAAGC,SAASF,IAAU,eAArE,YAAuF,CAAC,EAAG,GAAGE,SAASN,IAAY,iBAA5I,SACKG,EAAKI,OADDH,UCZnBI,EAAQ,CAEV,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KACzC,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KACzC,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAEzC,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KACzC,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KACzC,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAEzC,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KACzC,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KACzC,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,MAGvCC,EAAQ,CAAC,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KACxD,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KACzC,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KACzC,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KACzC,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KACzC,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KACzC,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KACzC,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KACzC,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,MAEnCC,EAAQ,CAAC,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,MAC1aC,EAAQ,CAAC,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,MAC1aC,EAAQ,CAAC,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,MAC1aC,EAAQ,CAAC,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,MAC1aC,EAAQ,CAAC,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,MAC1aC,EAAQ,CAAC,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,MAC1aC,EAAQ,CAAC,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,MAC1aC,EAAS,CAAC,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,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","file":"static/js/main.17d54486.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Line.css\";\r\nimport { Cell } from \"./App\";\r\n\r\ntype LineProps = {\r\n    lineNum: number;\r\n    cells: Cell[];\r\n};\r\n\r\nconst Line: React.FC<LineProps> = ({ cells, lineNum }) => {\r\n    return (\r\n        <ul className=\"Line\">\r\n            {cells.map((cell, index) => (\r\n                <li key={index} className={`Cell ${cell.isOriginal && \"text-red\"} ${[2, 5].includes(index) && \"border-right\"} ${[2, 5].includes(lineNum) && \"border-bottom\"}`}>\r\n                    {cell.value}\r\n                </li>\r\n            ))}\r\n        </ul>\r\n    );\r\n};\r\n\r\nexport default Line;\r\n","\r\nconst quiz1 = [\r\n    // block 0\r\n    [\"5\", \"3\", \".\", \".\", \"7\", \".\", \".\", \".\", \".\"],\r\n    [\"6\", \".\", \".\", \"1\", \"9\", \"5\", \".\", \".\", \".\"],\r\n    [\".\", \"9\", \"8\", \".\", \".\", \".\", \".\", \"6\", \".\"],\r\n    // block 1\r\n    [\"8\", \".\", \".\", \".\", \"6\", \".\", \".\", \".\", \"3\"],\r\n    [\"4\", \".\", \".\", \"8\", \".\", \"3\", \".\", \".\", \"1\"],\r\n    [\"7\", \".\", \".\", \".\", \"2\", \".\", \".\", \".\", \"6\"],\r\n    //block 2\r\n    [\".\", \"6\", \".\", \".\", \".\", \".\", \"2\", \"8\", \".\"],\r\n    [\".\", \".\", \".\", \"4\", \"1\", \"9\", \".\", \".\", \"5\"],\r\n    [\".\", \".\", \".\", \".\", \"8\", \".\", \".\", \"7\", \"9\"],\r\n];\r\n\r\nconst quiz2 = [[\".\", \".\", \"1\", \"7\", \".\", \".\", \"5\", \".\", \"9\"],\r\n[\"5\", \"7\", \"3\", \".\", \"2\", \"4\", \"1\", \".\", \"6\"],\r\n[\"8\", \".\", \".\", \"5\", \".\", \"1\", \".\", \".\", \"2\"],\r\n[\"7\", \".\", \".\", \"2\", \"9\", \"5\", \".\", \"1\", \"8\"],\r\n[\".\", \".\", \"9\", \"4\", \".\", \".\", \"3\", \".\", \"5\"],\r\n[\"6\", \"5\", \"2\", \"8\", \".\", \".\", \".\", \".\", \"7\"],\r\n[\"4\", \"6\", \"5\", \".\", \"8\", \".\", \".\", \"7\", \"1\"],\r\n[\".\", \".\", \".\", \"1\", \"5\", \"9\", \".\", \".\", \"4\"],\r\n[\"9\", \".\", \"8\", \".\", \".\", \"7\", \".\", \"5\", \"3\"]]\r\n\r\nconst quiz3 = [[\"9\", \".\", \"3\", \"4\", \"2\", \"8\", \"7\", \".\", \"6\"], [\".\", \"4\", \"8\", \"7\", \"6\", \"3\", \"2\", \".\", \"9\"], [\"6\", \"7\", \".\", \"1\", \"5\", \"9\", \"8\", \"3\", \"4\"], [\"3\", \".\", \"1\", \"2\", \"4\", \".\", \"9\", \"8\", \"5\"], [\"4\", \"2\", \"9\", \"3\", \"8\", \"5\", \".\", \"6\", \"7\"], [\"7\", \"8\", \"5\", \"9\", \"1\", \"6\", \"4\", \"2\", \"3\"], [\".\", \".\", \"6\", \"8\", \"7\", \"4\", \".\", \".\", \"2\"], [\"2\", \".\", \"7\", \".\", \"9\", \".\", \".\", \"4\", \"8\"], [\"8\", \"9\", \"4\", \"5\", \"3\", \"2\", \".\", \".\", \".\"]];\r\nconst quiz4 = [[\"1\", \".\", \"7\", \"9\", \"5\", \".\", \"2\", \"8\", \".\"], [\"6\", \"2\", \"5\", \"7\", \".\", \".\", \"4\", \"9\", \"1\"], [\"9\", \"8\", \".\", \"2\", \"1\", \"6\", \"7\", \"5\", \"3\"], [\"7\", \"9\", \"1\", \"5\", \"8\", \"2\", \"6\", \"3\", \".\"], [\"5\", \"6\", \"3\", \"4\", \".\", \"1\", \"8\", \".\", \"7\"], [\".\", \".\", \"8\", \".\", \"7\", \"3\", \".\", \"1\", \"9\"], [\".\", \"7\", \"2\", \".\", \"6\", \"9\", \"3\", \".\", \"5\"], [\".\", \"5\", \"9\", \"8\", \"4\", \"7\", \"1\", \"6\", \"2\"], [\"4\", \"1\", \"6\", \".\", \".\", \"5\", \"9\", \"7\", \"8\"]];\r\nconst quiz5 = [[\"3\", \"5\", \"6\", \"4\", \".\", \".\", \"7\", \"9\", \"1\"], [\".\", \".\", \"4\", \".\", \"6\", \"3\", \"5\", \"2\", \"8\"], [\"9\", \".\", \"2\", \"1\", \"5\", \"7\", \"3\", \"4\", \"6\"], [\"1\", \"3\", \"8\", \"2\", \".\", \".\", \".\", \"5\", \"4\"], [\"2\", \".\", \".\", \"5\", \".\", \".\", \"9\", \"8\", \"3\"], [\"5\", \".\", \"9\", \"3\", \".\", \".\", \"1\", \"7\", \"2\"], [\"4\", \"7\", \"5\", \"6\", \".\", \".\", \"8\", \"3\", \"9\"], [\"6\", \"2\", \"3\", \"8\", \"9\", \"5\", \"4\", \"1\", \"7\"], [\"8\", \"9\", \"1\", \"7\", \"3\", \".\", \"2\", \"6\", \"5\"]];\r\nconst quiz6 = [[\"8\", \"5\", \"9\", \".\", \"4\", \".\", \"6\", \"7\", \"1\"], [\"7\", \".\", \"3\", \".\", \"1\", \"6\", \".\", \"5\", \".\"], [\"2\", \"6\", \".\", \"8\", \"7\", \"5\", \"3\", \"4\", \"9\"], [\"3\", \".\", \"5\", \".\", \"6\", \"4\", \"9\", \"8\", \"7\"], [\"6\", \"9\", \"7\", \"2\", \".\", \".\", \"4\", \"1\", \"5\"], [\".\", \"8\", \"4\", \".\", \"5\", \"9\", \"2\", \"3\", \".\"], [\"5\", \".\", \"2\", \"4\", \"9\", \"3\", \".\", \"6\", \"8\"], [\"9\", \"3\", \"6\", \"5\", \"8\", \"7\", \"1\", \"2\", \"4\"], [\".\", \"7\", \"8\", \"6\", \"2\", \"1\", \"5\", \".\", \".\"]];\r\nconst quiz7 = [[\".\", \"1\", \".\", \".\", \".\", \".\", \"9\", \"4\", \"8\"], [\"3\", \"9\", \"8\", \"4\", \"5\", \"1\", \"2\", \"7\", \"6\"], [\"4\", \".\", \".\", \"6\", \"8\", \"9\", \"1\", \"3\", \"5\"], [\".\", \"6\", \"2\", \"7\", \"3\", \"5\", \"4\", \"1\", \"9\"], [\"9\", \"3\", \"1\", \"8\", \"4\", \"6\", \"5\", \"2\", \"7\"], [\".\", \"5\", \"4\", \"1\", \".\", \"2\", \"8\", \"6\", \"3\"], [\"2\", \".\", \".\", \".\", \".\", \".\", \"6\", \"9\", \".\"], [\"1\", \"4\", \".\", \".\", \".\", \".\", \"7\", \".\", \"2\"], [\".\", \"7\", \".\", \".\", \".\", \".\", \"3\", \".\", \".\"]];\r\nconst quiz8 = [[\"5\", \".\", \".\", \"9\", \".\", \"2\", \"3\", \".\", \".\"], [\"9\", \".\", \"3\", \"5\", \"7\", \".\", \".\", \".\", \"6\"], [\"4\", \"2\", \".\", \".\", \".\", \".\", \"5\", \".\", \"9\"], [\"3\", \"7\", \"8\", \"2\", \".\", \".\", \".\", \"9\", \"5\"], [\"2\", \"9\", \"5\", \".\", \".\", \".\", \".\", \".\", \".\"], [\".\", \".\", \"1\", \"8\", \"9\", \"5\", \"7\", \"3\", \"2\"], [\"8\", \"3\", \"4\", \"6\", \"2\", \"9\", \"1\", \"5\", \"7\"], [\"7\", \"6\", \"2\", \"1\", \"5\", \"8\", \"9\", \"4\", \"3\"], [\".\", \".\", \"9\", \"4\", \"3\", \".\", \"2\", \"6\", \"8\"]];\r\nconst quiz9 = [[\".\", \"4\", \".\", \"6\", \"9\", \"7\", \"5\", \"1\", \"3\"], [\"5\", \"3\", \"1\", \".\", \".\", \"8\", \"7\", \"9\", \"6\"], [\"6\", \"7\", \"9\", \"5\", \"3\", \"1\", \"4\", \"8\", \"2\"], [\"1\", \".\", \".\", \"3\", \"7\", \".\", \"9\", \"4\", \"5\"], [\"9\", \".\", \"4\", \"1\", \".\", \".\", \".\", \".\", \"7\"], [\"7\", \"5\", \"3\", \"9\", \"8\", \"4\", \".\", \".\", \"1\"], [\"3\", \"9\", \"7\", \".\", \".\", \"5\", \"1\", \".\", \".\"], [\".\", \".\", \".\", \"7\", \".\", \"3\", \".\", \"5\", \"9\"], [\".\", \".\", \"5\", \".\", \".\", \"9\", \"3\", \"7\", \".\"]];\r\nconst quiz10 = [[\".\", \".\", \"8\", \".\", \"4\", \".\", \".\", \"7\", \"6\"], [\".\", \".\", \".\", \".\", \"7\", \".\", \"2\", \".\", \".\"], [\".\", \".\", \".\", \".\", \".\", \".\", \".\", \"9\", \".\"], [\".\", \".\", \"9\", \"5\", \"8\", \"3\", \"6\", \"4\", \"1\"], [\"4\", \"8\", \"5\", \".\", \"1\", \".\", \"7\", \"2\", \"3\"], [\".\", \".\", \".\", \"4\", \"2\", \"7\", \"9\", \"8\", \"5\"], [\".\", \"9\", \"4\", \"2\", \"6\", \"1\", \"8\", \"3\", \"7\"], [\"8\", \"1\", \"2\", \"7\", \"3\", \".\", \".\", \"6\", \"9\"], [\"6\", \".\", \".\", \".\", \".\", \".\", \".\", \".\", \"2\"]];\r\nconst quiz11 = [[\".\", \".\", \"2\", \"9\", \"5\", \"3\", \".\", \".\", \".\"], [\"1\", \"9\", \"5\", \"6\", \"7\", \"2\", \"3\", \"4\", \"8\"], [\"3\", \"6\", \"7\", \"8\", \"1\", \"4\", \"9\", \"2\", \"5\"], [\".\", \"3\", \".\", \".\", \".\", \"8\", \".\", \".\", \".\"], [\"2\", \"5\", \".\", \".\", \"3\", \".\", \".\", \".\", \".\"], [\".\", \".\", \".\", \".\", \".\", \".\", \".\", \"3\", \".\"], [\".\", \"7\", \".\", \"2\", \"9\", \"6\", \".\", \".\", \".\"], [\"9\", \"2\", \".\", \".\", \"4\", \".\", \".\", \".\", \".\"], [\"5\", \"1\", \"6\", \"3\", \"8\", \"7\", \"2\", \"9\", \"4\"]];\r\nexport function randomSudoku() {\r\n    const all = [quiz1,\r\n        quiz2,\r\n        quiz3,\r\n        quiz4,\r\n        quiz5,\r\n        quiz6,\r\n        quiz7,\r\n        quiz8,\r\n        quiz9,\r\n        quiz10,\r\n        quiz11];\r\n    const random = all[Math.floor((Math.random() * all.length))]\r\n\r\n    return random;\r\n\r\n}","import React from \"react\";\r\nimport Line from \"./Line\";\r\nimport { randomSudoku } from \"./sudokus\";\r\n\r\ninterface IProps {}\r\n\r\ninterface Selection {\r\n    selections: string[];\r\n    pos: number;\r\n    boardPos: number;\r\n}\r\n\r\nexport interface Cell {\r\n    isOriginal: boolean;\r\n    value: string;\r\n}\r\n\r\ninterface IState {\r\n    board: Cell[][];\r\n    stack: Selection[];\r\n    timeoutId: number;\r\n    status: \"init\" | \"solving\" | \"solved\";\r\n}\r\n\r\nconst ANIMATION_DURATION = 10;\r\n\r\nclass App extends React.Component<IProps, IState> {\r\n    constructor(props: any) {\r\n        super(props);\r\n        const initState = this.randomNewBoard();\r\n\r\n        this.state = initState;\r\n\r\n        this.solveSudokuHandler = this.solveSudokuHandler.bind(this);\r\n        this.nextState = this.nextState.bind(this);\r\n        this.randomHandle = this.randomHandle.bind(this);\r\n    }\r\n\r\n    randomHandle() {\r\n        const state = this.randomNewBoard();\r\n        this.setState(state);\r\n    }\r\n\r\n    nextEmptyCell(pos: number, board: Cell[][]) {\r\n        let newPos = pos + 1;\r\n        while (newPos < 81 && board[Math.floor(newPos / 9)][newPos % 9].value !== \".\") {\r\n            newPos++;\r\n        }\r\n        return newPos;\r\n    }\r\n\r\n    randomNewBoard(): IState {\r\n        const timeoutId = this.state?.timeoutId;\r\n        if (timeoutId) {\r\n            clearTimeout(timeoutId);\r\n        }\r\n\r\n        // const premitiveBoard = [\r\n        //     // block 0\r\n        //     [\"5\", \"3\", \".\", \".\", \"7\", \".\", \".\", \".\", \".\"],\r\n        //     [\"6\", \".\", \".\", \"1\", \"9\", \"5\", \".\", \".\", \".\"],\r\n        //     [\".\", \"9\", \"8\", \".\", \".\", \".\", \".\", \"6\", \".\"],\r\n        //     // block 1\r\n        //     [\"8\", \".\", \".\", \".\", \"6\", \".\", \".\", \".\", \"3\"],\r\n        //     [\"4\", \".\", \".\", \"8\", \".\", \"3\", \".\", \".\", \"1\"],\r\n        //     [\"7\", \".\", \".\", \".\", \"2\", \".\", \".\", \".\", \"6\"],\r\n        //     //block 2\r\n        //     [\".\", \"6\", \".\", \".\", \".\", \".\", \"2\", \"8\", \".\"],\r\n        //     [\".\", \".\", \".\", \"4\", \"1\", \"9\", \".\", \".\", \"5\"],\r\n        //     [\".\", \".\", \".\", \".\", \"8\", \".\", \".\", \"7\", \"9\"],\r\n        // ];\r\n        // const premitiveBoard = [\r\n        //     // block 0\r\n        //     [\"5\", \"3\", \"4\", \"6\", \"7\", \"8\", \".\", \".\", \".\"],\r\n        //     [\"6\", \".\", \".\", \"1\", \"9\", \"5\", \".\", \".\", \".\"],\r\n        //     [\".\", \"9\", \"8\", \".\", \".\", \".\", \".\", \"6\", \".\"],\r\n        //     // block 1\r\n        //     [\"8\", \".\", \".\", \".\", \"6\", \".\", \".\", \".\", \"3\"],\r\n        //     [\"4\", \".\", \".\", \"8\", \".\", \"3\", \".\", \".\", \"1\"],\r\n        //     [\"7\", \".\", \".\", \".\", \"2\", \".\", \".\", \".\", \"6\"],\r\n        //     //block 2\r\n        //     [\".\", \"6\", \".\", \".\", \".\", \".\", \"2\", \"8\", \".\"],\r\n        //     [\".\", \".\", \".\", \"4\", \"1\", \"9\", \".\", \".\", \"5\"],\r\n        //     [\".\", \".\", \".\", \".\", \"8\", \".\", \".\", \"7\", \"9\"],\r\n        // ];\r\n\r\n        // const premitiveBoard = [\r\n        //     // block 0\r\n        //     [\"5\", \"3\", \"4\", \"6\", \"7\", \"8\", \"9\", \"1\", \"2\"],\r\n        //     [\"6\", \"7\", \"2\", \"1\", \"9\", \"5\", \"3\", \"4\", \"8\"],\r\n        //     [\"1\", \"9\", \"8\", \"3\", \"4\", \"2\", \"5\", \"6\", \"7\"],\r\n        //     // block 1\r\n        //     [\"8\", \"5\", \"9\", \"7\", \"6\", \".\", \".\", \".\", \"3\"],\r\n        //     [\"4\", \".\", \".\", \"8\", \".\", \"3\", \".\", \".\", \"1\"],\r\n        //     [\"7\", \".\", \".\", \".\", \"2\", \".\", \".\", \".\", \"6\"],\r\n        //     //block 2\r\n        //     [\".\", \"6\", \".\", \".\", \".\", \".\", \"2\", \"8\", \".\"],\r\n        //     [\".\", \".\", \".\", \"4\", \"1\", \"9\", \".\", \".\", \"5\"],\r\n        //     [\".\", \".\", \".\", \".\", \"8\", \".\", \".\", \"7\", \"9\"],\r\n        // ];\r\n\r\n        const premitiveBoard = randomSudoku();\r\n        const board = premitiveBoard.map((line) => {\r\n            const newLine = line.map((ele) => ({ value: ele, isOriginal: ele !== \".\" }));\r\n            return newLine;\r\n        });\r\n\r\n        // find the first current Pos\r\n        let boardPos = 0;\r\n        while (boardPos < 81 && board[Math.floor(boardPos / 9)][boardPos % 9].value !== \".\") {\r\n            boardPos++;\r\n        }\r\n\r\n        let selections = this.selectionList(boardPos, board);\r\n\r\n        return {\r\n            board,\r\n            stack: [\r\n                {\r\n                    selections,\r\n                    pos: 0,\r\n                    boardPos: boardPos,\r\n                },\r\n            ],\r\n            timeoutId: 0,\r\n            status: \"init\",\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Return all possible value given a pos in the board\r\n     * @param currPos\r\n     * @param board\r\n     */\r\n    selectionList(currPos: number, board: Cell[][]): string[] {\r\n        const row = Math.floor(currPos / 9);\r\n        const col = currPos % 9;\r\n\r\n        const selections: string[] = [];\r\n\r\n        const existed = Array(9).fill(false);\r\n        // check row\r\n        for (let i = 0; i < 9; i++) {\r\n            if (board[i][col].value !== \".\") {\r\n                const c = board[i][col].value;\r\n                existed[parseInt(c, 10) - 1] = true;\r\n            }\r\n        }\r\n        // check col\r\n        for (let j = 0; j < 9; j++) {\r\n            if (board[row][j].value !== \".\") {\r\n                const c = board[row][j].value;\r\n                existed[parseInt(c, 10) - 1] = true;\r\n            }\r\n        }\r\n        // check region\r\n\r\n        const lowerX = 3 * Math.floor(row / 3);\r\n        const upperX = lowerX + 3;\r\n\r\n        const lowerY = 3 * Math.floor(col / 3);\r\n        const upperY = lowerY + 3;\r\n\r\n        for (let i = lowerX; i < upperX; i++)\r\n            for (let j = lowerY; j < upperY; j++) {\r\n                if (board[i][j].value !== \".\") {\r\n                    const c = board[i][j].value;\r\n                    existed[parseInt(c, 10) - 1] = true;\r\n                }\r\n            }\r\n\r\n        // add non-existed number to selection list\r\n        for (let k = 0; k < 9; k++) {\r\n            if (existed[k] === false) {\r\n                const index = k;\r\n                selections.push(\"\" + (index + 1));\r\n            }\r\n        }\r\n        return selections;\r\n    }\r\n\r\n    solveSudokuHandler() {\r\n        const timeoutId = this.state.timeoutId;\r\n        if (timeoutId !== 0) {\r\n            return;\r\n        }\r\n\r\n        this.nextState();\r\n    }\r\n\r\n    nextState() {\r\n        const { stack, board } = this.state;\r\n        const top = stack[stack.length - 1];\r\n        const { selections, pos, boardPos } = top;\r\n        if (pos < selections.length) {\r\n            // fill value into current cell\r\n            const value = selections[pos];\r\n            const newBoard = this.setBoardValue(boardPos, value, board);\r\n\r\n            // find the next cell\r\n            const newBoardPos = this.nextEmptyCell(boardPos, newBoard);\r\n            this.setState({\r\n                board: newBoard,\r\n            });\r\n            if (newBoardPos < 81) {\r\n                const newSelection: Selection = {\r\n                    selections: this.selectionList(newBoardPos, newBoard),\r\n                    pos: 0,\r\n                    boardPos: newBoardPos,\r\n                };\r\n\r\n                // schedule next call\r\n                const timeoutId = window.setTimeout(() => {\r\n                    this.nextState();\r\n                }, ANIMATION_DURATION);\r\n                this.setState({\r\n                    stack: [...stack, newSelection],\r\n                    timeoutId,\r\n                    status: \"solving\",\r\n                });\r\n            } else {\r\n                console.log(\"end\");\r\n                this.setState({\r\n                    status: \"solved\",\r\n                });\r\n            }\r\n        } else {\r\n            // pop consecutive stack calls until find a pos that does not exceed selection length\r\n            const indexes: number[] = [];\r\n            const filledPosition: number[] = [];\r\n            for (let j = stack.length - 1; j >= 0; j--) {\r\n                const { pos, selections, boardPos } = stack[j];\r\n                if (pos >= selections.length - 1) {\r\n                    // if (selection.pos === selection.selections.length) {\r\n                    indexes.push(j);\r\n                    filledPosition.push(boardPos);\r\n                } else {\r\n                    break;\r\n                }\r\n            }\r\n\r\n            let newBoard = this.emptyBoardAtPosition(filledPosition, board);\r\n            const newStack = stack.filter((ele, index) => !indexes.includes(index));\r\n\r\n            if (newStack.length >= 1) {\r\n                const top = newStack[newStack.length - 1];\r\n                top.pos = top.pos + 1;\r\n            }\r\n\r\n            // schedule next call\r\n            const timeoutId = window.setTimeout(() => {\r\n                this.nextState();\r\n            }, ANIMATION_DURATION);\r\n\r\n            this.setState({\r\n                board: newBoard,\r\n                stack: newStack,\r\n                timeoutId,\r\n                status: \"solving\",\r\n            });\r\n        }\r\n\r\n        // schedule the next call\r\n    }\r\n\r\n    /**\r\n     * Create a new board\r\n     * @param currPos\r\n     * @param value\r\n     * @param board\r\n     */\r\n    setBoardValue(currPos: number, value: string, board: Cell[][]): Cell[][] {\r\n        const row = Math.floor(currPos / 9);\r\n        const col = currPos % 9;\r\n\r\n        const newBoard = board.map((rows, i) => {\r\n            const newLine = rows.map((ele: Cell, j: any) => {\r\n                if (i === row && j === col) {\r\n                    return {\r\n                        value,\r\n                        isOriginal: ele.isOriginal,\r\n                    };\r\n                } else {\r\n                    return ele;\r\n                }\r\n            });\r\n            return newLine;\r\n        });\r\n\r\n        return newBoard;\r\n    }\r\n\r\n    /**\r\n     * Create a new board\r\n     * @param currPos\r\n     * @param value\r\n     * @param board\r\n     */\r\n    emptyBoardAtPosition(positions: number[], board: Cell[][]): Cell[][] {\r\n        const newBoard = board.map((rows, i) => {\r\n            const newLine = rows.map((ele: Cell, j: any) => {\r\n                const curr = i * 9 + j;\r\n                if (positions.includes(curr)) {\r\n                    return {\r\n                        value: \".\",\r\n                        isOriginal: ele.isOriginal,\r\n                    };\r\n                } else {\r\n                    return ele;\r\n                }\r\n            });\r\n            return newLine;\r\n        });\r\n\r\n        return newBoard;\r\n    }\r\n\r\n    render() {\r\n        const { board, status } = this.state;\r\n        let msg;\r\n        if (status === \"solving\") {\r\n            msg = <p>Solving the puzzle</p>;\r\n        } else if (status === \"solved\") {\r\n            msg = <p>Solved!</p>;\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"grid\">\r\n                    <div className=\"game-board\">\r\n                        {board.map((line, index) => (\r\n                            <Line key={index} lineNum={index} cells={line} />\r\n                        ))}\r\n                    </div>\r\n                    <div className=\"right-column\">\r\n                        <h1>EzSudoku</h1>\r\n                        {msg}\r\n                        <div className=\"game-buttons\">\r\n                            <button onClick={this.randomHandle} style={{ marginBottom: \"20px\", padding: \"15px\" }}>\r\n                                New Game\r\n                            </button>\r\n                            <button className=\"button-solve\" onClick={this.solveSudokuHandler} title=\"Solve the Sudoku using back-tracking algorithm\">\r\n                                Solve!\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"box\">\r\n                    <h5 className=\"header\">SUDOKU RULES</h5>\r\n                    <p className=\"info\">\r\n                        Sudoku is a puzzle game, where the object is to use the numbers from 1-9 to fill every row, column and box. Each number can only occur once in every row,\r\n                        column or box. A number of fields will have numbers in them at the start, the rest will be filled in by you. If you manage to fill all the fields without\r\n                        ever having a duplicate number in a unit (row, column or box), you win the game.\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}